"""
Handlers for general text messages
"""
import logging
import asyncio
from aiogram import types, F
from bot.config import config
from bot.config.prompts import GPT_CONTEXT, KNOWLEDGE_BASE_CONTEXT
from bot.database.async_db_manager import AsyncDBManager
from bot.utils import remove_asterisks, split_message
from bot.utils.ai_client import generate_gpt_response
from bot.knowledge_base import KnowledgeBaseManager
from aiogram.filters import Filter

logger = logging.getLogger(__name__)
db = AsyncDBManager()
kb_manager = KnowledgeBaseManager()

async def handle_message(message: types.Message):
    """Handler for general text messages"""
    user_id = message.from_user.id
    user_message = message.text
    is_reply = False
    reply_to_message_text = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user.is_bot:
        is_reply = True
        reply_to_message_text = message.reply_to_message.text
        logger.info(f"User {user_id} replied to bot message")

    # Update last activity
    await db.update_user_activity(user_id)
    
    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç,
    # —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É—á—Ç–µ–Ω–æ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    logger.info(f"Saving incoming message from user {user_id} to chat history")
    message_saved = await db.save_chat_message(user_id, user_message, None)  # Response –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ–∑–∂–µ
    if not message_saved:
        logger.error(f"Failed to save message to chat history for user {user_id}")

    # Increment message count immediately for any text message handled
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫ –î–û –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ª–æ–≥–∞
    msg_count_before_increment = await db.get_user_message_count(user_id) 
    logger.info(f"Attempting to increment message count for user {user_id} upon receiving message. Count before: {msg_count_before_increment}")
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    increment_success = await db.increment_message_count(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
    if increment_success:
        # Reading count again immediately to confirm increment
        new_count_read = await db.get_user_message_count(user_id)
        logger.info(f"Successfully incremented message count for user {user_id}. Count read after increment: {new_count_read}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—á–µ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–ª—Å—è
        if new_count_read <= msg_count_before_increment and msg_count_before_increment > 0:
            logger.warning(f"Counter anomaly detected for user {user_id}: before={msg_count_before_increment}, after={new_count_read}")
    else:
        logger.error(f"Failed to increment message count for user {user_id}")

    # Send processing message
    processing_msg = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

    try:
        # Check message limits (–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –Ω–æ —Å—á–µ—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω)
        subscription = await db.get_subscription_status(user_id)
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π (—Å—á–µ—Ç—á–∏–∫ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
        msg_count = await db.get_user_message_count(user_id) 
        limit = await db.get_message_limit(user_id)
        logger.info(f"Checking limits for user {user_id}. Count: {msg_count}, Limit: {limit}, Subscription: {subscription}")

        if msg_count > limit: # –ò–∑–º–µ–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–æ–≥—É—é > , —Ç.–∫. –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –±—ã–ª –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç (—Å —É—á–µ—Ç–æ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="üíé –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="open_subscription"
                )]
            ])
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –æ–Ω –æ—Ç—Ä–∞–∂–∞–ª, —á—Ç–æ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω *–≤–∫–ª—é—á–∞—è* —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text(
                "üîí <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
                f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ {msg_count} –∏–∑ {limit} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≤–∞—à–µ–º —Ç–∞—Ä–∏—Ñ–µ '{subscription}' (–≤–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ).\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É\n"
                "‚Ä¢ –î–æ–∂–¥–∞—Ç—å—Å—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞\n\n"
                "–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            return

        # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        knowledge_content = kb_manager.get_content_for_query(user_message)

        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        if is_reply and reply_to_message_text:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            contextual_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{reply_to_message_text}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª: {user_message}"
            # Generate GPT response with additional context
            response = await gpt_request(contextual_message, user_id, knowledge_content)
        else:
            # Generate GPT response with chat history and knowledge base content
            response = await gpt_request(user_message, user_id, knowledge_content)

        # Remove formatting
        response = remove_asterisks(response)

        # Update the message in history with the response
        await db.update_chat_response(user_id, user_message, response)
        logger.info(f"Updated chat history with response for user {user_id}")

        # Delete processing message
        await processing_msg.delete()

        # Send response (respecting Telegram message limits)
        message_parts = split_message(response)
        for part in message_parts:
            await message.answer(part)

    except Exception as e:
        logger.error(f"Error processing message: {str(e)}")
        await processing_msg.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def gpt_request(prompt, user_id, knowledge_content=None, max_retry=2):
    """Generate response from GPT with retry logic"""
    retry_count = 0

    # Get chat history from database
    chat_history = await db.get_chat_history(user_id)

    # Determine context based on knowledge content
    system_content = GPT_CONTEXT
    if knowledge_content:
        system_content = KNOWLEDGE_BASE_CONTEXT.format(
            base_context=GPT_CONTEXT,
            knowledge_content=knowledge_content
        )

    # Format messages for the GPT API
    messages = [{"role": "system", "content": system_content}]

    # Add reversed history (chronological order)
    if chat_history:
        for msg, resp in reversed(chat_history):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –∑–∞–ø–∏—Å–∏ —Å null
            if msg is not None and resp is not None:
                messages.append({"role": "user", "content": msg})
                messages.append({"role": "assistant", "content": resp})
            else:
                logger.warning(f"Skipping null message or response in chat history for user {user_id}")

    # Add current user message
    messages.append({"role": "user", "content": prompt})

    while retry_count <= max_retry:
        try:
            # Add delay for retries
            if retry_count > 0:
                await asyncio.sleep(1)

            response = await generate_gpt_response(
                messages=messages,
                max_tokens=config.GPT_MAX_TOKENS,
                temperature=config.GPT_TEMP
            )
            return response

        except Exception as e:
            logger.error(f"GPT request error (attempt {retry_count+1}): {e}")
            retry_count += 1

    # If all retries failed
    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ù–∞—à–∏ —Å–µ—Ä–≤–µ—Ä—ã —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def process_callback(callback_query: types.CallbackQuery):
    """Handle button callbacks"""
    await callback_query.answer()
    
    if callback_query.data == "open_subscription":
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥–ø–∏—Å–∫–∏
        from bot.handlers.payment_handler import subscription_command
        await subscription_command(callback_query.message)
    
    # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–ª–±—ç–∫–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å

def register_handlers(dp):
    """Register general message handler"""
    dp.message.register(handle_message, F.text)
    dp.callback_query.register(process_callback, F.data == "open_subscription")
