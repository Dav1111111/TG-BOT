"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ Telegram –±–æ—Ç–µ
"""
import logging
from datetime import datetime, timedelta
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message
from aiogram.fsm.context import FSMContext

from bot.config import config
from bot.database import DBManager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = DBManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_PROVIDER_TOKEN = config.PAYMENT_PROVIDER_TOKEN
CURRENCY = "RUB"

# –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫
SUBSCRIPTION_OPTIONS = {
    "week": {
        "title": "–ù–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 7 –¥–Ω–µ–π",
        "price": 299,  # –í –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏)
        "days": 7,
        "messages_limit": 100,
    },
    "month": {
        "title": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π",
        "price": 999,  # –í –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏)
        "days": 30,
        "messages_limit": 500,
    },
    "year": {
        "title": "–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –Ω–∞ 365 –¥–Ω–µ–π",
        "price": 5999,  # –í –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏)
        "days": 365,
        "messages_limit": 5000,
    }
}

async def subscription_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    """
    if not PAYMENT_PROVIDER_TOKEN:
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        logger.warning("Payment provider token not configured")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"{SUBSCRIPTION_OPTIONS['week']['title']} - {SUBSCRIPTION_OPTIONS['week']['price'] / 100} {CURRENCY}",
            callback_data="subscribe_week"
        )],
        [types.InlineKeyboardButton(
            text=f"{SUBSCRIPTION_OPTIONS['month']['title']} - {SUBSCRIPTION_OPTIONS['month']['price'] / 100} {CURRENCY}",
            callback_data="subscribe_month"
        )],
        [types.InlineKeyboardButton(
            text=f"{SUBSCRIPTION_OPTIONS['year']['title']} - {SUBSCRIPTION_OPTIONS['year']['price'] / 100} {CURRENCY}",
            callback_data="subscribe_year"
        )]
    ])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    subscription = db.get_subscription_status(user_id)
    msg_count = db.get_user_message_count(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö
    await message.answer(
        f"üí¨ <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {subscription.capitalize()}\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {msg_count}/{config.SUBSCRIPTION_LIMITS.get(subscription, 50)}\n\n"
        f"üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
        f"‚Ä¢ <b>–ù–µ–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {SUBSCRIPTION_OPTIONS['week']['price'] / 100} {CURRENCY}\n"
        f"  ‚úì {SUBSCRIPTION_OPTIONS['week']['messages_limit']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"  ‚úì –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        f"  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n\n"
        f"‚Ä¢ <b>–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {SUBSCRIPTION_OPTIONS['month']['price'] / 100} {CURRENCY}\n"
        f"  ‚úì {SUBSCRIPTION_OPTIONS['month']['messages_limit']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"  ‚úì –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        f"  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n\n"
        f"‚Ä¢ <b>–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> {SUBSCRIPTION_OPTIONS['year']['price'] / 100} {CURRENCY}\n"
        f"  ‚úì {SUBSCRIPTION_OPTIONS['year']['messages_limit']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        f"  ‚úì –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\n"
        f"  ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞\n"
        f"  ‚úì –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    logger.info(f"User {user_id} requested subscription options")

async def subscribe_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
    sub_type = callback_query.data.split("_")[1]
    if sub_type not in SUBSCRIPTION_OPTIONS:
        await callback_query.message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = SUBSCRIPTION_OPTIONS[sub_type]
    
    # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã
    await send_invoice(callback_query.message, sub_type, subscription)
    
    logger.info(f"User {callback_query.from_user.id} selected {sub_type} subscription")

async def send_invoice(message: Message, sub_type: str, subscription: dict):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç
    await message.answer_invoice(
        title=subscription["title"],
        description=subscription["description"],
        provider_token=PAYMENT_PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=[LabeledPrice(
            label=subscription["title"],
            amount=subscription["price"]
        )],
        payload=f"subscription_{sub_type}",
        start_parameter="subscribe",
        protect_content=False
    )

async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.
    
    # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
    await pre_checkout_query.answer(ok=True)
    
    logger.info(f"Pre-checkout query {pre_checkout_query.id} from user {pre_checkout_query.from_user.id} confirmed")

async def successful_payment(message: Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    """
    payment_info = message.successful_payment
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    sub_type = payment_info.invoice_payload.split("_")[1]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        subscription_info = SUBSCRIPTION_OPTIONS[sub_type]
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # —Å —Ç–∏–ø–æ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç–æ–π –∏—Å—Ç–µ—á–µ–Ω–∏—è
        update_subscription(user_id, "premium", subscription_info["days"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        update_message_limit(user_id, subscription_info["messages_limit"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        await message.answer(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_info['title']}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {subscription_info['days']} –¥–Ω–µ–π\n"
            f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {subscription_info['messages_limit']}\n\n"
            f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.",
            parse_mode="HTML"
        )
        
        logger.info(f"User {user_id} successfully purchased {sub_type} subscription")
    
    except Exception as e:
        logger.error(f"Error processing payment for user {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

def update_subscription(user_id: int, status: str, days: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –µ—â–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ DBManager
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_date = datetime.now() + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        db.execute_query(
            "UPDATE users SET subscription_status = ?, subscription_expiry = ? WHERE user_id = ?",
            (status, expiry_date, user_id)
        )
        
        logger.info(f"Updated subscription for user {user_id} to {status} until {expiry_date}")
        return True
    except Exception as e:
        logger.error(f"Error updating subscription for user {user_id}: {e}")
        return False

def update_message_limit(user_id: int, limit: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        db.execute_query(
            "UPDATE users SET messages_count = 0, message_limit = ? WHERE user_id = ?",
            (limit, user_id)
        )
        
        logger.info(f"Reset message count and set limit to {limit} for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Error updating message limit for user {user_id}: {e}")
        return False

def register_handlers(dp: Router):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    dp.message.register(subscription_command, Command("subscribe"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(subscribe_callback, F.data.startswith("subscribe_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    dp.pre_checkout_query.register(process_pre_checkout)
    dp.message.register(successful_payment, F.successful_payment)
    
    logger.info("Payment handlers registered") 