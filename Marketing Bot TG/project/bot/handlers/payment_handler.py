"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ Telegram –±–æ—Ç–µ
"""
import logging
from datetime import datetime, timedelta
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.config import config
from bot.database import DBManager
from bot.utils.yookassa_client import create_payment, check_payment_status

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db = DBManager()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
CURRENCY = config.PAYMENT_CURRENCY

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
SUBSCRIPTION = {
    "title": "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞",
    "description": "–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞",
    "price": 1,  # –í —Ä—É–±–ª—è—Ö
    "days": 30,  # –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö
    "messages_limit": 500  # –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
}

async def subscription_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    """
    if not config.YOOKASSA_SHOP_ID or not config.YOOKASSA_SECRET_KEY:
        await message.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        logger.warning("YooKassa credentials not configured")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    subscription_status = db.get_subscription_status(user_id)
    msg_count = db.get_user_message_count(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    if subscription_status == "premium":
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_date = db.execute_query(
            "SELECT subscription_expiry FROM users WHERE user_id = ?",
            (user_id,),
            True
        )
        
        expiry_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if expiry_date and expiry_date[0][0]:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
                if isinstance(expiry_date[0][0], str):
                    expiry = datetime.fromisoformat(expiry_date[0][0])
                else:
                    expiry = expiry_date[0][0]
                expiry_str = expiry.strftime("%d.%m.%Y")
            except Exception as e:
                logger.error(f"Error parsing expiry date: {e}")
        
        text = (
            f"üîπ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ <b>–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞</b>\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{expiry_str}</b>\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{msg_count}/{SUBSCRIPTION['messages_limit']}</b>\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?"
        )
    else:
        limit = config.SUBSCRIPTION_LIMITS["free"]
        text = (
            f"üîπ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            f"–£ –≤–∞—Å –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)\n"
            f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{limit}</b>\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <b>{msg_count}/{limit}</b>\n\n"
            f"–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {SUBSCRIPTION['messages_limit']}\n"
            f"‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞\n"
            f"‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION['price']} {CURRENCY}</b>\n"
            f"–°—Ä–æ–∫: <b>{SUBSCRIPTION['days']} –¥–Ω–µ–π</b>"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=f"–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ {SUBSCRIPTION['price']} {CURRENCY}",
            callback_data="subscribe"
        )]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
    
    logger.info(f"Subscription info shown to user {user_id}")

async def subscribe_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    """
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
    payment_info = create_payment(
        amount=SUBSCRIPTION["price"],
        description=f"{SUBSCRIPTION['title']} - {SUBSCRIPTION['description']}",
        user_id=user_id,
        subscription_type="premium"
    )
    
    if not payment_info:
        await callback_query.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.save_payment_info(user_id, payment_info["id"], "premium", SUBSCRIPTION["price"])
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏—Ç—å",
            url=payment_info["confirmation_url"]
        )],
        [types.InlineKeyboardButton(
            text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data="check_payment"
        )]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
    await callback_query.message.answer(
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"–¢–∞—Ä–∏—Ñ: <b>{SUBSCRIPTION['title']}</b>\n"
        f"–°—É–º–º–∞: <b>{SUBSCRIPTION['price']} {CURRENCY}</b>\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{SUBSCRIPTION['days']} –¥–Ω–µ–π</b>\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É'.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    logger.info(f"Payment link sent to user {user_id}")

async def check_payment_callback(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    """
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payment_info = db.get_last_payment(user_id)
    
    if not payment_info:
        await callback_query.message.answer("‚ö†Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    payment_id = payment_info[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    payment_status = check_payment_status(payment_id)
    
    if not payment_status:
        await callback_query.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω
    if payment_status["status"] == "succeeded" and payment_status["paid"]:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_subscription(user_id, "premium", SUBSCRIPTION["days"])
        update_message_limit(user_id, SUBSCRIPTION["messages_limit"])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
        await callback_query.message.answer(
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞: {SUBSCRIPTION['title']}\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {SUBSCRIPTION['days']} –¥–Ω–µ–π\n"
            f"–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {SUBSCRIPTION['messages_limit']}\n\n"
            f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.",
            parse_mode="HTML"
        )
        
        logger.info(f"User {user_id} successfully purchased premium subscription")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
        await callback_query.message.answer(
            f"‚ÑπÔ∏è <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b>: {payment_status['status']}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )

def update_subscription(user_id: int, status: str, days: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        expiry_date = datetime.now() + timedelta(days=days)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        db.execute_query(
            "UPDATE users SET subscription_status = ?, subscription_expiry = ? WHERE user_id = ?",
            (status, expiry_date, user_id)
        )
        
        logger.info(f"Updated subscription for user {user_id} to {status} until {expiry_date}")
        return True
    except Exception as e:
        logger.error(f"Error updating subscription for user {user_id}: {e}")
        return False

def update_message_limit(user_id: int, limit: int):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        db.execute_query(
            "UPDATE users SET messages_count = 0, message_limit = ? WHERE user_id = ?",
            (limit, user_id)
        )
        
        logger.info(f"Reset message count and set limit to {limit} for user {user_id}")
        return True
    except Exception as e:
        logger.error(f"Error updating message limit for user {user_id}: {e}")
        return False

def register_handlers(dp: Router):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π –∏ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    dp.message.register(subscription_command, Command("subscribe"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
    dp.callback_query.register(subscribe_callback, F.data == "subscribe")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
    dp.callback_query.register(check_payment_callback, F.data == "check_payment")
    
    logger.info("Payment handlers registered") 