"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞
"""
import logging
import asyncio
import re
from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from bot.utils.ai_client import generate_gpt_response
from bot.states.states import BusinessPlanStates
from bot.utils.text_utils import format_business_plan, split_message, split_response_into_sections
from bot.database import DBManager
from bot.config.prompts import BUSINESS_PLAN_PROMPT, BUSINESS_PLAN_GENERATION_PROMPT

logger = logging.getLogger(__name__)

async def business_plan_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω"
    """
    await callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ
    await state.set_state(BusinessPlanStates.waiting_for_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await callback_query.message.answer(BUSINESS_PLAN_PROMPT)

    logger.info(f"User {callback_query.from_user.id} started business plan creation")

async def business_plan_command(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /business
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ
    await state.set_state(BusinessPlanStates.waiting_for_info)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await message.answer(BUSINESS_PLAN_PROMPT)

    logger.info(f"User {message.from_user.id} started business plan creation via command")

async def handle_business_info(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
    business_info = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    processing_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from bot.knowledge_base.vector_kb_manager import VectorKnowledgeBaseManager
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É
        kb_manager = VectorKnowledgeBaseManager()
        knowledge_content = kb_manager.get_content_for_query(business_info)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –µ—Å–ª–∏ –æ–Ω –Ω–∞–π–¥–µ–Ω
        kb_context = ""
        if knowledge_content:
            kb_context = f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞:\n{knowledge_content}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
        prompt = BUSINESS_PLAN_GENERATION_PROMPT.format(business_info=business_info) + kb_context

        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–±–µ–∑ —ç–º–æ–¥–∑–∏)
        section_titles = [
            "–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
            "–ü—Ä–æ–±–ª–µ–º–∞",
            "–¶–µ–Ω–Ω–æ—Å—Ç—å",
            "–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å",
            "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è",
            "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã",
            "–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è",
            "–ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ",
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ"
        ]

        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        system_prompt = """–ö–û–ù–¢–ï–ö–°–¢
–¢—ã ‚Äî –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞–º, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º —Å–∏—Å—Ç–µ–º–Ω–æ –ø—Ä–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏—Ö –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—ã–Ω–æ–∫ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.

–¶–ï–õ–¨
–°–æ–∑–¥–∞—Ç—å —á–µ—Ç–∫–∏–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–π –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –¥–ª—è –º–∞–ª–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—é –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ, –ø—Ä–æ–¥–∞–∂–∞—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.

–°–¢–†–£–ö–¢–£–†–ê –ë–ò–ó–ù–ï–°-–ü–õ–ê–ù–ê
–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 10 –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–∞–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äì –ö—Ç–æ –≤–∞—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã?
ü§î –ü—Ä–æ–±–ª–µ–º–∞ ‚Äì –ö–∞–∫—É—é –≥–ª–∞–≤–Ω—É—é –±–æ–ª—å —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç?
üíé –¶–µ–Ω–Ω–æ—Å—Ç—å ‚Äì –ö–∞–∫—É—é –ø–æ–ª—å–∑—É –ø—Ä–∏–Ω–æ—Å–∏—Ç –ø—Ä–æ–¥—É–∫—Ç?
‚ú® –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ‚Äì –ß–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤—ã–¥–µ–ª—è–µ—Ç—Å—è —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤?
üòà –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ—à–µ–Ω–∏—è ‚Äì –ß—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–ª–∏–µ–Ω—Ç—ã —Å–µ–π—á–∞—Å?
‚öîÔ∏è –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã ‚Äì –ö—Ç–æ –≥–ª–∞–≤–Ω—ã–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∏ –∏ –∫–∞–∫ —Å –Ω–∏–º–∏ –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å?
üí° –ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?
üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è ‚Äì –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏?
üö¥ –ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ ‚Äì –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã—Ö 100+ –ø–ª–∞—Ç—è—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤?
üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äì –ö–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å?

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –¢–ï–ö–°–¢–£
–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —è—Å–Ω–æ—Å—Ç—å ‚Äì –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –¥–∞–∂–µ –Ω–æ–≤–∏—á–∫—É.
–ú–∏–Ω–∏–º—É–º –≤–æ–¥—ã ‚Äì –¢–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∏–¥–µ–∏.
–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å ‚Äì –í—Å–µ –ø—É–Ω–∫—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏ —Ä–µ–∞–ª–∏–∑—É–µ–º—ã–º–∏.
–ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ ‚Äì –ö–∞–∂–¥–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1-3 –∫—Ä–∞—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞, —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞.

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê
–û—Ç–ø—Ä–∞–≤–ª—è–π –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –¢—ã –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å 10 –û–¢–î–ï–õ–¨–ù–´–• –ò –°–ê–ú–û–°–¢–û–Ø–¢–ï–õ–¨–ù–´–• —Ä–∞–∑–¥–µ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–Ω–æ–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
–í–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–∞–∑–¥–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
–ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.", "2.", "3." –∏ —Ç.–¥.).
–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Ä–∞–∑–¥–µ–ª "1. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è", –∑–∞—Ç–µ–º "2. –ü—Ä–æ–±–ª–µ–º–∞" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–æ "10. –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ".

–ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1. ")."""

        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        messages = [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω
        response = await generate_gpt_response(messages=messages)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await processing_msg.delete()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞
        intro_msg = await message.answer("<b>–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω</b>\n\n–ù–∏–∂–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã 10 —Ä–∞–∑–¥–µ–ª–æ–≤ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞:")
        
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–æ–≥–æ 10 —Ä–∞–∑–¥–µ–ª–æ–≤ —Å —Ç–µ–≥–∞–º–∏
        try:
            # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ - –∏—â–µ–º —Ä–∞–∑–¥–µ–ª—ã –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            contents = {}
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.", "2.", ..., "10.")
            for i, title in enumerate(section_titles):
                current_num = i + 1
                
                # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª –ø–æ –Ω–æ–º–µ—Ä—É –∏ —Ç–æ—á–∫–µ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
                # –ò—â–µ–º —Ç–µ–∫—Å—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞
                if current_num < 10:
                    next_num = current_num + 1
                    # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∏ —Ç–µ–∫—Å—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ
                    pattern = rf"^\s*{current_num}\.\s*(.*?)(?=^\s*{next_num}\.\s*|\Z)"
                else: # –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (10.)
                    pattern = rf"^\s*{current_num}\.\s*(.*)"
                
                # –ò—â–µ–º —Å —Ñ–ª–∞–≥–∞–º–∏ MULTILINE –∏ DOTALL
                match = re.search(pattern, response, re.MULTILINE | re.DOTALL)
                
                if match:
                    # –ù–∞—à–ª–∏ —Ç–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ (–±–µ–∑ –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏)
                    section_content = match.group(1).strip()
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º —Å –Ω–æ–º–µ—Ä–æ–º
                    section_text = f"<b>{current_num}. {title}</b>\n\n{section_content}"
                    contents[i] = section_text
                else:
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–¥–µ–ª {current_num}. —Å –ø–æ–º–æ—â—å—é regex.")

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ 10 —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é regex, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º
            if len(contents) < 10:
                logger.warning(f"–ù–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ {len(contents)} —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é regex, –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ –Ω–æ–º–µ—Ä–∞–º.")
                
                # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ –Ω–æ–º–µ—Ä–∞–º "1.", "2.", ... "10." –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
                split_pattern = r'^\s*(?=\d{1,2}\.\s)'
                all_sections = re.split(split_pattern, response, flags=re.MULTILINE)
                
                # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
                all_sections = [s.strip() for s in all_sections if s.strip()]

                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Å—Ç–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏
                temp_sections = {}
                for section_part in all_sections:
                    match_num = re.match(r'^(\d{1,2})\.\s*(.*)', section_part, re.DOTALL)
                    if match_num:
                        num = int(match_num.group(1))
                        content_part = match_num.group(2).strip()
                        if 1 <= num <= 10:
                            idx = num - 1
                            if idx not in contents: # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω
                                title = section_titles[idx]
                                temp_sections[idx] = f"<b>{num}. {title}</b>\n\n{content_part}"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
                contents.update(temp_sections)

            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
            if len(contents) < 10:
                logger.warning(f"–ü–æ—Å–ª–µ –¥–≤—É—Ö –ø–æ–ø—ã—Ç–æ–∫ —Ä–∞–∑–±–æ—Ä–∞ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ {len(contents)} —Ä–∞–∑–¥–µ–ª–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ.")
                
                # –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                missing_indices = [i for i in range(10) if i not in contents]
                logger.info(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–∞–∑–¥–µ–ª—ã (–∏–Ω–¥–µ–∫—Å—ã): {missing_indices}")
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                logger.info(f"–û—Ç–≤–µ—Ç GPT –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {response[:500]}...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
                missing_titles_with_nums = [f"{i+1}. {section_titles[i]}" for i in missing_indices]
                if missing_titles_with_nums:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                        missing_prompt = f"–°–æ–∑–¥–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞, –Ω–∞—á–∏–Ω–∞—è –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª —Å –Ω–æ–º–µ—Ä–∞ –∏ —Ç–æ—á–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '3. –¶–µ–Ω–Ω–æ—Å—Ç—å'):\n" + "\n".join(missing_titles_with_nums)
                        missing_messages = [
                            {"role": "system", "content": system_prompt}, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π system_prompt
                            {"role": "user", "content": prompt},
                            {"role": "assistant", "content": "–Ø —Å–æ–∑–¥–∞–ª –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—ã –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."},
                            {"role": "user", "content": missing_prompt}
                        ]
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã
                        missing_response = await generate_gpt_response(messages=missing_messages)
                        logger.info(f"–û—Ç–≤–µ—Ç GPT –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {missing_response[:500]}...")
                        
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤ –≤ –Ω–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ –ø–æ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
                        for i in missing_indices:
                            current_num = i + 1
                            if current_num < 10:
                                next_num = current_num + 1
                                pattern = rf"^\s*{current_num}\.\s*(.*?)(?=^\s*{next_num}\.\s*|\Z)"
                            else:
                                pattern = rf"^\s*{current_num}\.\s*(.*)"
                            
                            match = re.search(pattern, missing_response, re.MULTILINE | re.DOTALL)
                            if match:
                                section_content = match.group(1).strip()
                                title = section_titles[i]
                                section_text = f"<b>{current_num}. {title}</b>\n\n{section_content}"
                                contents[i] = section_text
                            else:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ä–∞–∑–¥–µ–ª {current_num}. –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –¥–æ–ø. –∑–∞–ø—Ä–æ—Å.")

                    except Exception as gen_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤: {gen_error}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –ø–æ –ø–æ—Ä—è–¥–∫—É
            for i in range(10):
                current_num = i + 1
                title = section_titles[i] # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ —ç–º–æ–¥–∑–∏

                if i in contents:
                    # –†–∞–∑–¥–µ–ª –Ω–∞–π–¥–µ–Ω –∏ —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω
                    section_text = contents[i]
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ –∏ –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
                    if not re.match(rf"<b>{current_num}\.", section_text):
                         # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω–æ–µ, –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                         content_match = re.search(r'\n\n(.*)', section_text, re.DOTALL)
                         section_content = content_match.group(1) if content_match else section_text # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ \n\n –∏–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç
                         section_text = f"<b>{current_num}. {title}</b>\n\n{section_content.strip()}"
                    await message.answer(section_text)
                else:
                    # –†–∞–∑–¥–µ–ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
                    logger.warning(f"–†–∞–∑–¥–µ–ª {current_num}. –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ.")
                    section_prompt = f"–°–æ–∑–¥–∞–π —Ä–∞–∑–¥–µ–ª '{current_num}. {title}' –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ: {business_info}"
                    
                    try:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                        section_messages = [
                            {"role": "system", "content": f"–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞–º. –°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–¥–µ–ª '{current_num}. {title}' –¥–ª—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π). –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å '{current_num}.'."},
                            {"role": "user", "content": section_prompt}
                        ]
                        
                        section_content_raw = await generate_gpt_response(messages=section_messages, max_tokens=300)
                        
                        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                        section_content = re.sub(rf"^\s*{current_num}\.\s*", "", section_content_raw).strip()
                        full_text = f"<b>{current_num}. {title}</b>\n\n{section_content}"
                        await message.answer(full_text)
                    except Exception as section_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ {current_num}. {title}: {section_error}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É, –µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                        await message.answer(f"<b>{current_num}. {title}</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(0.5)
                
        except Exception as parsing_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ä–∞–∑–¥–µ–ª–æ–≤: {parsing_error}")
            
            # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä–∞–≤–Ω—ã–µ —Å–µ–∫—Ü–∏–∏
            try:
                # –î–µ–ª–∏–º –Ω–∞ 10 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π
                total_len = len(response)
                section_len = total_len // 10
                
                for i in range(10):
                    start = i * section_len
                    end = start + section_len if i < 9 else total_len
                    
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –∫–æ–Ω–µ—Ü –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    if i < 9:
                        next_period = response.find('. ', end - 50, end + 50)
                        if next_period != -1:
                            end = next_period + 1
                    
                    section_text = response[start:end].strip()
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    full_text = f"<b>{section_titles[i]}</b>\n\n{section_text}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª
                    await message.answer(full_text)
                    await asyncio.sleep(0.5)
            except Exception as final_error:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞: {final_error}")
                await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        logger.info(f"Business plan generated for user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error generating business plan: {e}")
        await processing_msg.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

def register_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏
    dp.callback_query.register(business_plan_callback, F.data == "business_plan")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /business
    dp.message.register(business_plan_command, Command("business"))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ
    dp.message.register(handle_business_info, BusinessPlanStates.waiting_for_info)
