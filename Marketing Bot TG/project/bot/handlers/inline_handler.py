"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ Telegram
"""
import logging
import uuid
import asyncio
import time
from aiogram import types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from bot.utils.ai_client import generate_gpt_response
from bot.utils.text_utils import remove_asterisks
from bot.knowledge_base.vector_kb_manager import VectorKnowledgeBaseManager
from bot.database import DBManager

logger = logging.getLogger(__name__)
db = DBManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
try:
    kb_manager = VectorKnowledgeBaseManager()
except Exception as e:
    logger.error(f"Error initializing KnowledgeBaseManager for inline mode: {e}")
    kb_manager = None

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ)
RESPONSE_CACHE = {}
CACHE_EXPIRATION = 600  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (10 –º–∏–Ω—É—Ç)
CACHE_TIMESTAMPS = {}  # –í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫—ç—à

# –¢–∏–ø –∏–Ω–ª–∞–π–Ω-–æ—Ç–≤–µ—Ç–æ–≤
MARKETING_TYPES = [
    {
        "id": "quick_advice",
        "title": "üí° –ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç",
        "description": "–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É",
        "thumb_url": "https://cdn-icons-png.flaticon.com/512/1048/1048953.png"
    },
    {
        "id": "content_idea",
        "title": "üìù –ò–¥–µ—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "description": "–ò–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö",
        "thumb_url": "https://cdn-icons-png.flaticon.com/512/1048/1048945.png"
    },
    {
        "id": "customer_message",
        "title": "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É",
        "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É",
        "thumb_url": "https://cdn-icons-png.flaticon.com/512/1048/1048950.png"
    }
]

async def clean_cache_task():
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    """
    while True:
        try:
            current_time = time.time()
            keys_to_delete = []

            # –ù–∞—Ö–æ–¥–∏–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            for key, timestamp in CACHE_TIMESTAMPS.items():
                if current_time - timestamp > CACHE_EXPIRATION:
                    keys_to_delete.append(key)

            # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            for key in keys_to_delete:
                if key in RESPONSE_CACHE:
                    del RESPONSE_CACHE[key]
                if key in CACHE_TIMESTAMPS:
                    del CACHE_TIMESTAMPS[key]

            if keys_to_delete:
                logger.info(f"Cleaned {len(keys_to_delete)} expired cache entries")

        except Exception as e:
            logger.error(f"Error cleaning cache: {e}")

        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await asyncio.sleep(300)

async def inline_query_handler(inline_query: types.InlineQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
    """
    query_text = inline_query.query.strip()
    user_id = inline_query.from_user.id

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    if len(query_text) < 3:
        results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å...",
                description="–ù–∞–ø—Ä–∏–º–µ—Ä: –∏–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞ –æ –∫–æ—Ñ–µ–π–Ω–µ, –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã",
                input_message_content=InputTextMessageContent(
                    message_text="–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ 3-—Ö —Å–∏–º–≤–æ–ª–æ–≤."
                ),
                thumb_url="https://cdn-icons-png.flaticon.com/512/1048/1048967.png"
            )
        ]
        await inline_query.answer(results, cache_time=5)
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{user_id}:{query_text}"
        if cache_key in RESPONSE_CACHE:
            results = RESPONSE_CACHE[cache_key]
            await inline_query.answer(results, cache_time=300)
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        placeholder_results = []
        for type_data in MARKETING_TYPES:
            placeholder_results.append(
                InlineQueryResultArticle(
                    id=f"{type_data['id']}_{uuid.uuid4()}",
                    title=f"{type_data['title']} (–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...)",
                    description="–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è...",
                    input_message_content=InputTextMessageContent(
                        message_text=f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é {type_data['title'].lower()} –Ω–∞ –∑–∞–ø—Ä–æ—Å: {query_text}"
                    ),
                    thumb_url=type_data['thumb_url']
                )
            )

        # –û—Ç–≤–µ—á–∞–µ–º –∑–∞–≥–ª—É—à–∫–∞–º–∏ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª –ø—Ä–æ–≥—Ä–µ—Å—Å
        await inline_query.answer(placeholder_results, cache_time=5)

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(generate_inline_results(inline_query, query_text, user_id))

    except Exception as e:
        logger.error(f"Error processing inline query: {e}")
        error_results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)[:100]}",
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {query_text}"
                )
            )
        ]
        await inline_query.answer(error_results, cache_time=5)

async def generate_inline_results(inline_query: types.InlineQuery, query_text: str, user_id: int):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ

    Args:
        inline_query: –ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å
        query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_user_activity(user_id)

        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
        knowledge_content = None
        if kb_manager:
            knowledge_content = kb_manager.get_content_for_query(query_text)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        results = []

        for type_data in MARKETING_TYPES:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if type_data["id"] == "quick_advice":
                content = await generate_quick_advice(query_text, knowledge_content)
            elif type_data["id"] == "content_idea":
                content = await generate_content_idea(query_text, knowledge_content)
            elif type_data["id"] == "customer_message":
                content = await generate_customer_message(query_text, knowledge_content)
            else:
                content = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞"

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results.append(
                InlineQueryResultArticle(
                    id=f"{type_data['id']}_{uuid.uuid4()}",
                    title=type_data['title'],
                    description=content[:100] + "..." if len(content) > 100 else content,
                    input_message_content=InputTextMessageContent(
                        message_text=content,
                        parse_mode="HTML"
                    ),
                    thumb_url=type_data['thumb_url']
                )
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        cache_key = f"{user_id}:{query_text}"
        RESPONSE_CACHE[cache_key] = results
        CACHE_TIMESTAMPS[cache_key] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º timestamp

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        await inline_query.answer(results, cache_time=300)

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.increment_message_count(user_id)

    except Exception as e:
        logger.error(f"Error generating inline results: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_results = [
            InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                description=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)[:100]}",
                input_message_content=InputTextMessageContent(
                    message_text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {query_text}"
                )
            )
        ]
        await inline_query.answer(error_results, cache_time=5)

async def generate_quick_advice(query_text: str, knowledge_content: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Å–æ–≤–µ—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É

    Args:
        query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        knowledge_content: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    prompt = f"–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Å–æ–≤–µ—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query_text}"

    if knowledge_content:
        prompt += f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:\n{knowledge_content}"

    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É. –î–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ù–µ –Ω–∞—á–∏–Ω–∞–π —Å —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–í–æ—Ç –º–æ–π —Å–æ–≤–µ—Ç' –∏–ª–∏ '–ö–∞–∫ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥'."},
        {"role": "user", "content": prompt}
    ]

    response = await generate_gpt_response(
        messages=messages,
        max_tokens=500,
        temperature=0.7
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = remove_asterisks(response)
    return f"<b>üí° –°–æ–≤–µ—Ç –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞:</b>\n\n{response}"

async def generate_content_idea(query_text: str, knowledge_content: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–¥–µ—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π

    Args:
        query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        knowledge_content: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    prompt = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—É—é –∏–¥–µ—é –¥–ª—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö –ø–æ —Ç–µ–º–µ: {query_text}"

    if knowledge_content:
        prompt += f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:\n{knowledge_content}"

    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ü—Ä–µ–¥–ª–∞–≥–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–¥–µ–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Ö–µ—à—Ç–µ–≥–∞–º–∏. –ù–µ –Ω–∞—á–∏–Ω–∞–π —Å —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ '–í–æ—Ç –º–æ—è –∏–¥–µ—è' –∏–ª–∏ '–ö–∞–∫ SMM-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'."},
        {"role": "user", "content": prompt}
    ]

    response = await generate_gpt_response(
        messages=messages,
        max_tokens=800,
        temperature=0.8
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = remove_asterisks(response)
    return f"<b>üìù –ò–¥–µ—è –¥–ª—è –ø–æ—Å—Ç–∞:</b>\n\n{response}"

async def generate_customer_message(query_text: str, knowledge_content: str = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞

    Args:
        query_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        knowledge_content: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: –ì–æ—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    """
    prompt = f"–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–∞ –∑–∞–ø—Ä–æ—Å/–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {query_text}"

    if knowledge_content:
        prompt += f"\n\n–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ:\n{knowledge_content}"

    messages = [
        {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ü–∏—à–∏ –≤–µ–∂–ª–∏–≤—ã–µ, —ç–º–ø–∞—Ç–∏—á–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã. –ù–µ –Ω–∞—á–∏–Ω–∞–π —Å –æ–±—Ä–∞—â–µ–Ω–∏–π '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç'."},
        {"role": "user", "content": prompt}
    ]

    response = await generate_gpt_response(
        messages=messages,
        max_tokens=600,
        temperature=0.7
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = remove_asterisks(response)
    return f"<b>üí¨ –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:</b>\n\n{response}"

def register_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
    asyncio.create_task(clean_cache_task())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å–æ–≤
    dp.inline_query.register(inline_query_handler)
